// Generated by Xata Codegen 0.30.1. Please do not edit.
import { buildClient } from "@xata.io/client";
import type {
  BaseClientOptions,
  SchemaInference,
  XataRecord,
} from "@xata.io/client";



const tables = [
  {
    name: "adonis_schema",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "batch",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_b514smqj4l03v7teo30g4h9nfg_jqn2c4.adonis_schema_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "migration_time",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: "CURRENT_TIMESTAMP",
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "adonis_schema_versions",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["version"],
    uniqueConstraints: {},
    columns: [
      {
        name: "version",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "auth_access_tokens",
    checkConstraints: {},
    foreignKeys: {
      auth_access_tokens_tokenable_id_foreign: {
        name: "auth_access_tokens_tokenable_id_foreign",
        columns: ["tokenable_id"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "abilities",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "created_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "expires_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "hash",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_b514smqj4l03v7teo30g4h9nfg_jqn2c4.auth_access_tokens_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "last_used_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "tokenable_id",
        type: "link",
        link: { table: "users" },
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "type",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "user_progresses",
    checkConstraints: {},
    foreignKeys: {
      user_progresses_user_id_foreign: {
        name: "user_progresses_user_id_foreign",
        columns: ["user_id"],
        referencedTable: "users",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
      user_progresses_work_id_foreign: {
        name: "user_progresses_work_id_foreign",
        columns: ["work_id"],
        referencedTable: "works",
        referencedColumns: ["id"],
        onDelete: "CASCADE",
      },
    },
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "chapters_read",
        type: "int",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_b514smqj4l03v7teo30g4h9nfg_jqn2c4.user_progresses_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "last_read_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "user_id",
        type: "link",
        link: { table: "users" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "work_id",
        type: "link",
        link: { table: "works" },
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "users",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      users_email_unique: { name: "users_email_unique", columns: ["email"] },
      users_username_unique: {
        name: "users_username_unique",
        columns: ["username"],
      },
    },
    columns: [
      {
        name: "email",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_b514smqj4l03v7teo30g4h9nfg_jqn2c4.users_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "password",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "username",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "websites",
    checkConstraints: {},
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {
      websites_name_unique: { name: "websites_name_unique", columns: ["name"] },
    },
    columns: [
      {
        name: "chapter_selectors",
        type: "json",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "cover_in_page",
        type: "bool",
        notNull: false,
        unique: false,
        defaultValue: "false",
        comment: "",
      },
      {
        name: "created_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_b514smqj4l03v7teo30g4h9nfg_jqn2c4.websites_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "limit",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "10",
        comment: "",
      },
      {
        name: "list_path",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "name",
        type: "string",
        notNull: true,
        unique: true,
        defaultValue: null,
        comment: "",
      },
      {
        name: "parallel_chunks",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "5",
        comment: "",
      },
      {
        name: "root",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "selectors",
        type: "json",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "updated_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
  {
    name: "works",
    checkConstraints: {
      works_type_check: {
        name: "works_type_check",
        columns: ["type"],
        definition:
          "CHECK ((type = ANY (ARRAY['MANGA'::text, 'MANHWA'::text, 'NOVEL'::text])))",
      },
    },
    foreignKeys: {},
    primaryKey: ["id"],
    uniqueConstraints: {},
    columns: [
      {
        name: "cover_url",
        type: "string",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "id",
        type: "int",
        notNull: true,
        unique: true,
        defaultValue:
          "nextval('bb_b514smqj4l03v7teo30g4h9nfg_jqn2c4.works_id_seq'::regclass)",
        comment: "",
      },
      {
        name: "last_scraped_at",
        type: "datetime",
        notNull: false,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "source_url",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "title",
        type: "string",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
      {
        name: "total_chapters",
        type: "int",
        notNull: false,
        unique: false,
        defaultValue: "0",
        comment: "",
      },
      {
        name: "type",
        type: "text",
        notNull: true,
        unique: false,
        defaultValue: null,
        comment: "",
      },
    ],
  },
] as const;

export type SchemaTables = typeof tables;
export type InferredTypes = SchemaInference<SchemaTables>;

export type AdonisSchema = InferredTypes["adonis_schema"];
export type AdonisSchemaRecord = AdonisSchema & XataRecord;

export type AdonisSchemaVersions = InferredTypes["adonis_schema_versions"];
export type AdonisSchemaVersionsRecord = AdonisSchemaVersions & XataRecord;

export type AuthAccessTokens = InferredTypes["auth_access_tokens"];
export type AuthAccessTokensRecord = AuthAccessTokens & XataRecord;

export type UserProgresses = InferredTypes["user_progresses"];
export type UserProgressesRecord = UserProgresses & XataRecord;

export type Users = InferredTypes["users"];
export type UsersRecord = Users & XataRecord;

export type Websites = InferredTypes["websites"];
export type WebsitesRecord = Websites & XataRecord;

export type Works = InferredTypes["works"];
export type WorksRecord = Works & XataRecord;

export type DatabaseSchema = {
  adonis_schema: AdonisSchemaRecord;
  adonis_schema_versions: AdonisSchemaVersionsRecord;
  auth_access_tokens: AuthAccessTokensRecord;
  user_progresses: UserProgressesRecord;
  users: UsersRecord;
  websites: WebsitesRecord;
  works: WorksRecord;
};

const DatabaseClient = buildClient();

const defaultOptions = {
  databaseURL:
    "https://metrike-s-workspace-jqn2c4.us-east-1.xata.sh/db/manjaco",
};

export class XataClient extends DatabaseClient<DatabaseSchema> {
  constructor(options?: BaseClientOptions) {
    super({ ...defaultOptions, ...options }, tables);
  }
}

let instance: XataClient | undefined = undefined;

export const getXataClient = () => {
  if (instance) return instance;

  instance = new XataClient({
    apiKey: 'xau_KWgvDDv4TXP2s1akJ3WWxwrKsodZEuH51',
    branch: 'main'
  });

  return instance;
};
